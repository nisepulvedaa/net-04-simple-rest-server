//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleRestServer.Models.Resources
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestServerEntities : DbContext
    {
        public RestServerEntities()
            : base("name=RestServerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Persona> Persona { get; set; }
    
        public virtual int EliminarPersona(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarPersona", idParameter);
        }
    
        public virtual int InsertarPersona(string nombres, string apellidos, Nullable<int> rut, string dvrut, Nullable<int> edad, string direccion, string correo)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var rutParameter = rut.HasValue ?
                new ObjectParameter("rut", rut) :
                new ObjectParameter("rut", typeof(int));
    
            var dvrutParameter = dvrut != null ?
                new ObjectParameter("dvrut", dvrut) :
                new ObjectParameter("dvrut", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPersona", nombresParameter, apellidosParameter, rutParameter, dvrutParameter, edadParameter, direccionParameter, correoParameter);
        }
    
        public virtual int ActualizarPersona(Nullable<int> id, string nombres, string apellidos, Nullable<int> rut, string dvrut, Nullable<int> edad, string direccion, string correo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var rutParameter = rut.HasValue ?
                new ObjectParameter("rut", rut) :
                new ObjectParameter("rut", typeof(int));
    
            var dvrutParameter = dvrut != null ?
                new ObjectParameter("dvrut", dvrut) :
                new ObjectParameter("dvrut", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarPersona", idParameter, nombresParameter, apellidosParameter, rutParameter, dvrutParameter, edadParameter, direccionParameter, correoParameter);
        }
    }
}
